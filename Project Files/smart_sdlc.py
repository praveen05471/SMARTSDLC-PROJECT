# -*- coding: utf-8 -*-
"""smart SDLC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ixmca4srtq6svhYQJXmN1IufYGRWWLEE
"""

!pip install -U transformers

#Load model directly
from transformers import AutoTokenizer, AutoModelForCausalLM
from huggingface_hub import hf_hub_download
import os

# Set a higher timeout for downloads
os.environ['HF_HUB_DOWNLOAD_TIMEOUT'] = '600' # Timeout in seconds (e.g., 10 minutes)


tokenizer = AutoTokenizer.from_pretrained("ibm-granite/granite-3.3-2b-instruct")
model = AutoModelForCausalLM.from_pretrained("ibm-granite/granite-3.3-2b-instruct")

# ✅ Smart SDLC AI using IBM Granite Model in Google Colab with Authentication and Tabbed Interface + Chatbot

!pip install gradio transformers accelerate --quiet

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# --- Load Model and Tokenizer ---
model_name = "ibm-granite/granite-3.3-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype=torch.float16, device_map="auto")

# --- Query Function ---
def query_model(prompt):
    inputs = tokenizer(prompt, return_tensors="pt").to(model.device)
    outputs = model.generate(**inputs, max_new_tokens=200, pad_token_id=tokenizer.eos_token_id)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# --- Functionalities ---
def classify_requirements(text):
    prompt = f"""Classify the following software requirement:
{text}"""
    return query_model(prompt)

def generate_code(requirement):
    prompt = f"Generate code for this requirement: {requirement}"
    return query_model(prompt)

def summarize_code(code):
    prompt = f"""Summarize this code:
{code}"""
    return query_model(prompt)

def generate_test_cases(code):
    prompt = f"""Generate test cases for the following code:
{code}"""
    return query_model(prompt)

def chat_with_bot(message, history=[]):
    prompt = f"You are a helpful software development assistant. {message}"
    reply = query_model(prompt)
    history.append((message, reply))
    return history, ""

# --- User Auth Store ---
users = {}
sessions = {}
current_user = {"username": None}

# --- Auth Logic ---
def signup(username, password):
    if username.strip() == "" or password.strip() == "":
        return "❗ Username and password required."
    if username in users:
        return "❌ Username already exists."
    users[username] = password
    sessions[username] = False
    return "✅ Account created successfully."

def login(username, password):
    if users.get(username) == password:
        current_user["username"] = username
        sessions[username] = True
        return f"✅ Welcome {username}!"
    return "❌ Invalid credentials."

def logout():
    if current_user["username"]:
        sessions[current_user["username"]] = False
    current_user["username"] = None
    return "👋 Logged out."

def is_logged_in():
    return sessions.get(current_user["username"], False)

# --- UI ---
with gr.Blocks(theme=gr.themes.Soft()) as app:
    login_section = gr.Column(visible=True)
    profile_section = gr.Column(visible=False)

    with login_section:
        gr.Markdown("""
        # 🧠 Smart SDLC AI
        Streamline your software development lifecycle with AI assistance powered by IBM Granite.
        """)
        with gr.Tab("🆕 Signup"):
            su_user = gr.Textbox(label="Username")
            su_pass = gr.Textbox(label="Password", type="password")
            su_msg = gr.Textbox(label="Signup Status")
            gr.Button("Sign Up").click(signup, [su_user, su_pass], su_msg)

        with gr.Tab("🔐 Login"):
            li_user = gr.Textbox(label="Username")
            li_pass = gr.Textbox(label="Password", type="password")
            li_msg = gr.Textbox(label="Login Status")
            def do_login(u, p):
                msg = login(u, p)
                return msg, gr.update(visible=not is_logged_in()), gr.update(visible=is_logged_in())
            gr.Button("Login").click(do_login, [li_user, li_pass], [li_msg, login_section, profile_section])

    with profile_section:
        gr.Markdown(lambda: f"### 👤 Profile: {current_user['username']}" if current_user['username'] else "")

        with gr.Tab("📄 Classify Requirements"):
            req_input = gr.Textbox(label="Requirement Text")
            req_output = gr.Textbox(label="Classification")
            gr.Button("Classify").click(lambda x: classify_requirements(x) if is_logged_in() else "🔒 Login required.", req_input, req_output)

        with gr.Tab("💻 Generate Code"):
            code_input = gr.Textbox(label="Enter Requirement")
            code_output = gr.Textbox(label="Generated Code")
            gr.Button("Generate").click(lambda x: generate_code(x) if is_logged_in() else "🔒 Login required.", code_input, code_output)

        with gr.Tab("🧪 Test Case Generator"):
            test_input = gr.Textbox(label="Input Code")
            test_output = gr.Textbox(label="Test Cases")
            gr.Button("Generate Tests").click(lambda x: generate_test_cases(x) if is_logged_in() else "🔒 Login required.", test_input, test_output)

        with gr.Tab("📋 Code Summary"):
            summary_input = gr.Textbox(label="Paste Code")
            summary_output = gr.Textbox(label="Summary")
            gr.Button("Summarize").click(lambda x: summarize_code(x) if is_logged_in() else "🔒 Login required.", summary_input, summary_output)

        with gr.Tab("🤖 Chatbot"):
            chatbot = gr.Chatbot()
            user_input = gr.Textbox(label="Ask about SDLC, code, or bugs")
            gr.Button("Send").click(lambda msg, hist: chat_with_bot(msg, hist) if is_logged_in() else (["🔒 Please login to chat."], ""), [user_input, chatbot], [chatbot, user_input])

        with gr.Tab("🆘 Help"):
            gr.Markdown("""
            ### How to Use
            1. Sign up and login.
            2. Navigate through features like requirement classification, code generation, and testing.
            3. Use the chatbot to ask development-related questions.
            4. Click logout when done.
            """)

        gr.Markdown("---")
        gr.Markdown(lambda: f"👋 Logged in as **{current_user['username']}**. Click below to logout." if current_user['username'] else "")
        logout_msg = gr.Textbox(label="Logout Message")
        gr.Button("🚪 Logout").click(lambda: logout(), outputs=[logout_msg])

app.launch()